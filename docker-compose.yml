services:
  bootstrap:
    image: snapauth/bootstrap:latest
    build:
      context: ./scripts
      dockerfile: Dockerfile.bootstrap
    volumes:
      - .:/workspace
    restart: "no"

  db:
    image: postgres:16-alpine
    depends_on:
      bootstrap:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5434:5432"  # Changed from 5432 to avoid conflict with rasa-postgres on 5433
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  fusionauth:
    image: fusionauth/fusionauth-app:1.50.1
    depends_on:
      bootstrap:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: jdbc:postgresql://db:5432/${DB_NAME}
      DATABASE_ROOT_USERNAME: ${DB_USER}
      DATABASE_ROOT_PASSWORD: ${DB_PASSWORD}
      DATABASE_USERNAME: ${DB_USER}
      DATABASE_PASSWORD: ${DB_PASSWORD}
      FUSIONAUTH_APP_MEMORY: ${FUSIONAUTH_APP_MEMORY}
      FUSIONAUTH_APP_RUNTIME_MODE: ${FUSIONAUTH_APP_RUNTIME_MODE}
      FUSIONAUTH_APP_URL: ${FUSIONAUTH_BASE_URL}
      SEARCH_TYPE: database
      FUSIONAUTH_APP_KICKSTART_FILE: /usr/local/fusionauth/kickstart/kickstart.json
    ports:
      - "9011:9011"  # Using standard FusionAuth port
    volumes:
      - ./kickstart:/usr/local/fusionauth/kickstart
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9011/api/status"]
      interval: 10s
      timeout: 5s
      retries: 10

  snapauth:
    image: snapauth/app:latest
    build: ./snapauth
    depends_on:
      fusionauth:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "${SNAPAUTH_SERVICE_PORT:-8080}:8080"  # SnapAuth service port (override host port via env)
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db_data:
